function Euler_scheme(lambdaInside,area_diff_stop,max_iter,small_step_limit,display_every_n,energy_every_n,...
            text_each_ite,check_area_every,Psize,extensionmax,resample_each,Cxm,Cym,dl0m,no_final_energy,no_final_energy2,...
            antidivergence,evol_eq_sign,last_disp_Cxm,last_disp_Cym,adaptative_new_step,...
            shift,lambda,kappa,sigma_used,lambdaOutside,c1,c2,timestep,Imagee,real_t,su,old_su,...
            dxa,dx,dxxs,dxx,dxxxa,dxxx,dxxxxs,dxxxx,...
            dya,dy,dyys,dyy,dyyya,dyyy,dyyyys,dyyyy,...
            ddl0ma,ddl0m,t,tt,...
            new_step_,new_step,param_set)
% this is the simplest scheme, just Euler step with an home made way of determining step size in time.        
global Level_set_fct
%     global Level_set_fct
%    if lambda~=0 && kappa~=0
        Level_set_fct=Level_set_fct-new_step*evol_eq_sign*new_step_;
%     else
%         Level_set_fct=Level_set_fct-new_step*evol_eq_sign*new_step_;
%    end
end
